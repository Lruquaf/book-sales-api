from fastapi import FastAPI, Depends
from contextlib import asynccontextmanager
from apscheduler.schedulers.background import BackgroundScheduler
from database import get_all_books, get_book_by_isbn
from send_mail import send_email
from auth import admin_required
from scraper import fetch_books
from simple_forecast import (
    compute_all_forecasts,
    compute_forecast_by_isbn,
    # recover_forecast
)


# # **ğŸ“Œ Lifespan Event Handler TanÄ±mlama**
# @asynccontextmanager
# async def lifespan(app: FastAPI):
#     print("ğŸš€ API baÅŸlatÄ±lÄ±yor, scheduler devreye giriyor...")

#     # **Scheduler'Ä± BaÅŸlat**
#     scheduler = BackgroundScheduler(timezone="Europe/Istanbul")  # TÃ¼rkiye Saati (UTC+3)
#     scheduler.add_job(
#         fetch_books, "cron", hour=21, minute=0
#     )  # **Her gÃ¼n saat 21:00'de Ã§alÄ±ÅŸacak**
#     scheduler.start()
#     print("âœ… Scheduler baÅŸlatÄ±ldÄ±! (Her gÃ¼n saat 21:00'de Ã§alÄ±ÅŸacak)")

#     yield  # API Ã§alÄ±ÅŸÄ±rken burada bekleyecek

#     # **API KapanÄ±nca Scheduler'Ä± Durdur**
#     scheduler.shutdown()
#     print("ğŸ›‘ Scheduler durduruldu, API kapanÄ±yor.")


# **ğŸ“Œ FastAPI UygulamasÄ±**
app = FastAPI()


@app.get("/")
def read_root():
    return {"message": "Book Sales API"}


@app.get("/books")
def get_books():
    return get_all_books()


@app.get("/books/{isbn}")
def get_book(isbn: str):
    book = get_book_by_isbn(isbn)
    return book if book else {"error": "Book not found"}


@app.post("/fetch-books", dependencies=[Depends(admin_required)])
def manual_fetch_books():
    print("ğŸ“¡ Kitap verileri gÃ¼ncelleniyor...")  # LOG: API Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda gÃ¶ster
    fetch_books()
    print("âœ… Kitap verileri baÅŸarÄ±yla gÃ¼ncellendi!")  # LOG: Ä°ÅŸlem tamamlandÄ± mesajÄ±
    return {"message": "Books data updated successfully!"}


@app.post("/send-report", dependencies=[Depends(admin_required)])
def send_report(
    admin_id: str = Depends(admin_required),
):  # Yetkilendirilen admin kimliÄŸi
    response = send_email(admin_id)  # Mail gÃ¶nderme fonksiyonunu Ã§aÄŸÄ±r ve sonucu al
    return response  # DoÄŸrudan dÃ¶nÃ¼ÅŸ deÄŸerini return et


# @app.get("/forecasts")
# def get_all_forecasts():
#     return compute_all_forecasts()


# @app.get("/forecasts/{isbn}/test")
# def get_forecast_by_isbn(isbn: str):
#     return compute_forecast_by_isbn(isbn)

# @app.post("/forecasts/recover")
# def recover():
#     return recover_forecast()


@app.post("/forecasts/compute")
def compute_and_save_forecasts():
    return compute_all_forecasts()


@app.get("/forecasts")
def get_all_forecasts_from_db():
    from database import books_collection

    books = books_collection.find({}, {"_id": 1, "name": 1, "forecast_history": 1})
    return list(books)


@app.get("/forecasts/{isbn}")
def get_forecast_by_book(isbn: str):
    book = get_book_by_isbn(isbn)
    if not book:
        return {"error": "Book not found"}
    return {
        "isbn": isbn,
        "name": book.get("name"),
        "forecast_history": book.get("forecast_history", []),
    }


@app.post("/fetch-books-and-compute-forecasts")
def fetch_books_and_compute_forecasts():
    fetch_books()
    compute_all_forecasts()
